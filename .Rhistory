b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
rm(list = ls())
### Data Simulation
set.seed(20882)
nu_k <- rbind(c(0.1, 0.1, 0.7, 0.1), c(0.7, 0.1, 0.1, 0.1),
c(0.45, 0.05, 0.05, 0.45), c(0.1, 0.3, 0.3, 0.3))
ci <- sample(1:4, 200, TRUE)
data_test <- matrix(NA, ncol = 4, nrow = 200)
for(i in 1:200){
data_test[i, ] <- rmultinom(1, 5, nu_k[ci[i], ])
}
set.seed(8731)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:15, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
rm(list = ls())
### Data Simulation
set.seed(20882)
nu_k <- rbind(c(0.1, 0.1, 0.7, 0.1), c(0.7, 0.1, 0.1, 0.1),
c(0.45, 0.05, 0.05, 0.45), c(0.1, 0.3, 0.3, 0.3))
ci <- sample(1:4, 200, TRUE)
data_test <- matrix(NA, ncol = 4, nrow = 200)
for(i in 1:200){
data_test[i, ] <- rmultinom(1, 300, nu_k[ci[i], ])
}
set.seed(93017)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:15, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
### Required Commands for build the packages: ----------------------------------
uninstall()
### Required Library: ----------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(DirichletReg)
library(salso)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
norm_exp(log_allocate_prob(0, rep(2:3, 15), xi, data_test,gamma_hyper, c(1, 2, 3)))
### Data Simulation: -----------------------------------------------------------
rm(list = ls())
set.seed(20882)
### Assignment vector: Assume that we have 3 clusters.
xi <- c(10, 15, 20, 10, 15)
alpha_vec <- rgamma(5, xi, 1)
psi <- alpha_vec[1:3]/sum(alpha_vec[1:3])
ci <- sample(seq(1,3), size = 30, replace = TRUE, prob = psi)
### Assume: data is in R3; n = 30
gamma_hyper <- t(matrix(c(10, 1, 1, 1, 10, 1, 1, 1, 10, 1, 1, 1, 10, 10, 10),
nrow = 3))
nu_k <- rdirichlet(3, gamma_hyper[1:3, ])
sum_y <- rpois(30, 5)
data_test <- matrix(NA, ncol = 3, nrow = 30)
for(i in 1:30){
data_test[i, ] <- rmultinom(1, sum_y[i], nu_k[ci[i], ])
}
norm_exp(log_allocate_prob(0, rep(2:3, 15), xi, data_test,gamma_hyper, c(1, 2, 3)))
sum(norm_exp(log_allocate_prob(0, rep(2:3, 15), xi, data_test,gamma_hyper, c(1, 2, 3))))
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(DirichletReg)
library(salso)
library(ClusterProj)
rm(list = ls())
### Simulate the data
data_test <- rbind(t(matrix(rep(c(1, 0, 0, 0, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 1, 0, 0, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 0, 1, 0, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 0, 0, 1, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 0, 0, 0, 1), 10), ncol = 10)))
set.seed(20882)
gamma_init <- rbind(diag(5),
rbind(t(matrix(c(1, 0, 0, 0, 1), ncol = 1)),
t(matrix(c(0, 1, 0, 1, 0), ncol = 1)),
t(matrix(c(0, 1, 1, 0, 0), ncol = 1)),
t(matrix(c(1, 0, 0, 1, 0), ncol = 1)),
t(matrix(c(0, 1, 0, 0, 1), ncol = 1)))) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:10, 50, TRUE)
xi_init <- rep(10, 10)
alpha_init <- rgamma(10, xi_init, 1)
a_theta <- 0.5
b_theta <- 0.5
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(10, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
rm(list = ls())
### Data Simulation
set.seed(20882)
nu_k <- diag(6) * 0.5
nu_k[nu_k == 0] <- 0.1
ci <- sort(rep(1:6, 50))
data_test <- matrix(NA, ncol = 6, nrow = 300)
for(i in 1:300){
data_test[i, ] <- rmultinom(1, 100, nu_k[ci[i], ])
}
set.seed(20882)
gamma_init <- rbind(diag(6),
c(1, 0, 0, 1, 0, 0), c(0, 1, 0, 0, 1, 0),
c(0, 0, 1, 0, 0, 1), c(1, 1, 1, 0, 0, 0)) * 0.01
gamma_init[gamma_init == 0] <- 0.001
ci_init <- sample(1:10, 300, TRUE)
xi_init <- rep(1, 10)
alpha_init <- rgamma(10, xi_init, 1)
a_theta <- 0.5
b_theta <- 0.5
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(10, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
rm(list = ls())
### Data Simulation
set.seed(20882)
nu_k <- diag(10)[c(3, 5), ] * 0.7
nu_k[nu_k == 0] <- 0.3/9
ci <- sample(1:2, 100, TRUE)
data_test <- matrix(NA, ncol = 10, nrow = 100)
for(i in 1:100){
data_test[i, ] <- rmultinom(1, 250, nu_k[ci[i], ])
}
table(ci)
set.seed(152487)
gamma_init <- diag(10) * 10
gamma_init[gamma_init == 0] <- 5
ci_init <- sample(1:10, 100, TRUE)
xi_init <- rep(1, 10)
alpha_init <- rgamma(10, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(10, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
rm(list = ls())
### Data Simulation
set.seed(20882)
nu_k <- rbind(c(0.1, 0.1, 0.7, 0.1), c(0.7, 0.1, 0.1, 0.1),
c(0.45, 0.05, 0.05, 0.45), c(0.1, 0.3, 0.3, 0.3))
ci <- sample(1:4, 200, TRUE)
data_test <- matrix(NA, ncol = 4, nrow = 200)
for(i in 1:200){
data_test[i, ] <- rmultinom(1, 5, nu_k[ci[i], ])
}
set.seed(8731)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:15, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
rm(list = ls())
### Data Simulation
set.seed(20882)
nu_k <- rbind(c(0.1, 0.1, 0.7, 0.1), c(0.7, 0.1, 0.1, 0.1),
c(0.45, 0.05, 0.05, 0.45), c(0.1, 0.3, 0.3, 0.3))
ci <- sample(1:4, 200, TRUE)
data_test <- matrix(NA, ncol = 4, nrow = 200)
for(i in 1:200){
data_test[i, ] <- rmultinom(1, 300, nu_k[ci[i], ])
}
set.seed(93017)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:15, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
### Required Library: ----------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(DirichletReg)
library(salso)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(DirichletReg)
library(salso)
library(ClusterProj)
rm(list = ls())
### Data Simulation
set.seed(20882)
nu_k <- rbind(c(0.1, 0.1, 0.7, 0.1), c(0.7, 0.1, 0.1, 0.1),
c(0.45, 0.05, 0.05, 0.45), c(0.1, 0.3, 0.3, 0.3))
ci <- sample(1:4, 200, TRUE)
data_test <- matrix(NA, ncol = 4, nrow = 200)
for(i in 1:200){
data_test[i, ] <- rmultinom(1, 5, nu_k[ci[i], ])
}
set.seed(8731)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:15, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
set.seed(8731)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:5, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
set.seed(8731)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:10, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(ci, summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
set.seed(8731)
gamma_init <- rbind(diag(4), c(1, 1, 0, 0), c(1, 0, 1, 0), c(1, 0, 0, 1),
c(0, 1, 1, 0), c(0, 1, 0, 1), c(0, 0, 1, 1), c(1, 1, 1, 0),
c(1, 1, 0, 1), c(1, 0, 1, 1), c(0, 1, 1, 1), c(1, 1, 1, 1)) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:20, 200, TRUE)
xi_init <- rep(10, 15)
alpha_init <- rgamma(15, xi_init, 1)
a_theta <- 10
b_theta <- 10
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(15, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
check_unique_gamma(6, rep(1:5, 5), rbind(c(1, 1, 1), c(1, 0, 1), c(0, 0, 0), c(0, 0, 0), c(0, 0 ,0)))
### Required Commands for build the packages: ----------------------------------
uninstall()
### Required Library: ----------------------------------------------------------
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(DirichletReg)
library(salso)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
### Data Simulation: -----------------------------------------------------------
rm(list = ls())
set.seed(20882)
### Assignment vector: Assume that we have 3 clusters.
xi <- c(10, 15, 20, 10, 15)
alpha_vec <- rgamma(5, xi, 1)
psi <- alpha_vec[1:3]/sum(alpha_vec[1:3])
ci <- sample(seq(1,3), size = 30, replace = TRUE, prob = psi)
### Assume: data is in R3; n = 30
gamma_hyper <- t(matrix(c(10, 1, 1, 1, 10, 1, 1, 1, 10, 1, 1, 1, 10, 10, 10),
nrow = 3))
nu_k <- rdirichlet(3, gamma_hyper[1:3, ])
sum_y <- rpois(30, 5)
data_test <- matrix(NA, ncol = 3, nrow = 30)
for(i in 1:30){
data_test[i, ] <- rmultinom(1, sum_y[i], nu_k[ci[i], ])
}
clus_func_new(6, 5, data_test, gamma_hyper, xi)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(6, 5, data_test, gamma_hyper, xi)
clus_func_new(6, 7, data_test, gamma_hyper, xi)
clus_func_new(7, 7, data_test, gamma_hyper, xi)
clus_func_new(8, 7, data_test, gamma_hyper, xi)
clus_func_new(8, 7, data_test, gamma_hyper, xi)
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(8, 7, data_test, gamma_hyper, xi)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(8, 7, data_test, gamma_hyper, xi)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(8, 7, data_test, gamma_hyper, xi)
clus_func_new(10, 7, data_test, gamma_hyper, xi)
clus_func_new(10, 8, data_test, gamma_hyper, xi)
clus_func_new(10, 2, data_test, gamma_hyper, xi)
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(10, 2, data_test, gamma_hyper, xi)
clus_func_new(10, 5, data_test, gamma_hyper, xi)
clus_func_new(10, 8, data_test, gamma_hyper, xi)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(10, 8, data_test, gamma_hyper, xi)
gamma_hyper_new <- rbind(c(1, 1, 1), c(2, 2, 2), c(1, 0, 1))
clus_func_new(5, 4, data_test, gamma_hyper_new , xi)
gamma_hyper_new
clus_func_new(5, 4, data_test, gamma_hyper_new , xi)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(5, 4, data_test, gamma_hyper_new , xi)
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(10, 8, data_test, gamma_hyper, xi)
clus_func_new(10, 10, 8, data_test, gamma_hyper, xi, 1, 1)
clus_func_new(10, 10, 8, data_test, gamma_hyper_new, xi, 1, 1)
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(10, 10, 8, data_test, gamma_hyper, xi, 1, 1)
clus_func_new(10, 10, 8, data_test, gamma_hyper_new, xi, 1, 1)
### Required Commands for build the packages: ----------------------------------
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
clus_func_new(10, 10, 8, data_test, gamma_hyper, xi, 1, 1)
clus_func_new(10, 10, 8, data_test, gamma_hyper, xi, 1, 1, 10)
uninstall()
compileAttributes()
build()
install()
library(ClusterProj)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(DirichletReg)
library(salso)
library(ClusterProj)
rm(list = ls())
### Simulate the data
data_test <- rbind(t(matrix(rep(c(1, 0, 0, 0, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 1, 0, 0, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 0, 1, 0, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 0, 0, 1, 0), 10), ncol = 10)),
t(matrix(rep(c(0, 0, 0, 0, 1), 10), ncol = 10)))
### First Version
set.seed(20882)
gamma_init <- rbind(diag(5),
rbind(t(matrix(c(1, 0, 0, 0, 1), ncol = 1)),
t(matrix(c(0, 1, 0, 1, 0), ncol = 1)),
t(matrix(c(0, 1, 1, 0, 0), ncol = 1)),
t(matrix(c(1, 0, 0, 1, 0), ncol = 1)),
t(matrix(c(0, 1, 0, 0, 1), ncol = 1)))) * 0.5
gamma_init[gamma_init == 0] <- 0.1
ci_init <- sample(1:10, 50, TRUE)
xi_init <- rep(10, 10)
alpha_init <- rgamma(10, xi_init, 1)
a_theta <- 0.5
b_theta <- 0.5
sm_loop <- 10
total_iter <- 10000
test_final <- cluster_func(10, ci_init, alpha_init, xi_init, data_test,
gamma_init, a_theta, b_theta, sm_loop, total_iter,
TRUE, 1000)
summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate
table(summary(salso(t(test_final$clus_assign)[2001:10000, ]))$estimate)
set.seed(20882)
new_func_result <- clus_func_new(10000, 10, 3, data_test,
rbind(c(1, 0, 0, 0, 0), c(1, 1, 1, 0, 0), rep(1, 5)),
c(10, 10, 5), a_theta, b_theta, sm_loop)
new_func_result
clus_assign <- t(new_func_result$cluster_assignment)[2001:10000, ]
salso(clus_assign)
salso(clus_assign)$estimate
summary(salso(clus_assign))
summary(salso(clus_assign))$estimate
summary(salso(clus_assign))$estimate
