// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cluster_assign
arma::vec cluster_assign(arma::vec clus_assign, arma::vec clus_hyper, arma::mat y, arma::vec data_hyper);
RcppExport SEXP _ClusterProj_cluster_assign(SEXP clus_assignSEXP, SEXP clus_hyperSEXP, SEXP ySEXP, SEXP data_hyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type clus_assign(clus_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type clus_hyper(clus_hyperSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type data_hyper(data_hyperSEXP);
    rcpp_result_gen = Rcpp::wrap(cluster_assign(clus_assign, clus_hyper, y, data_hyper));
    return rcpp_result_gen;
END_RCPP
}
// test_fn
Rcpp::List test_fn(arma::vec probs);
RcppExport SEXP _ClusterProj_test_fn(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fn(probs));
    return rcpp_result_gen;
END_RCPP
}
// foo
Rcpp::NumericVector foo(double t, Rcpp::NumericVector k);
RcppExport SEXP _ClusterProj_foo(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(foo(t, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ClusterProj_cluster_assign", (DL_FUNC) &_ClusterProj_cluster_assign, 4},
    {"_ClusterProj_test_fn", (DL_FUNC) &_ClusterProj_test_fn, 1},
    {"_ClusterProj_foo", (DL_FUNC) &_ClusterProj_foo, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ClusterProj(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
