// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// expand_cluster
Rcpp::List expand_cluster(int K, Rcpp::IntegerVector inactive_clus, arma::uvec active_clus, arma::vec old_assign, arma::vec psi, arma::vec xi, double a_theta, double b_theta);
RcppExport SEXP _ClusterProj_expand_cluster(SEXP KSEXP, SEXP inactive_clusSEXP, SEXP active_clusSEXP, SEXP old_assignSEXP, SEXP psiSEXP, SEXP xiSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type inactive_clus(inactive_clusSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type active_clus(active_clusSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type old_assign(old_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_cluster(K, inactive_clus, active_clus, old_assign, psi, xi, a_theta, b_theta));
    return rcpp_result_gen;
END_RCPP
}
// contract_cluster
Rcpp::List contract_cluster(int K, arma::uvec active_clus, arma::vec old_assign, arma::vec psi, arma::vec xi, double a_theta, double b_theta);
RcppExport SEXP _ClusterProj_contract_cluster(SEXP KSEXP, SEXP active_clusSEXP, SEXP old_assignSEXP, SEXP psiSEXP, SEXP xiSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type active_clus(active_clusSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type old_assign(old_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(contract_cluster(K, active_clus, old_assign, psi, xi, a_theta, b_theta));
    return rcpp_result_gen;
END_RCPP
}
// expand_contract
Rcpp::List expand_contract(int K, arma::vec old_assign, arma::vec psi, arma::vec xi, double a_theta, double b_theta);
RcppExport SEXP _ClusterProj_expand_contract(SEXP KSEXP, SEXP old_assignSEXP, SEXP psiSEXP, SEXP xiSEXP, SEXP a_thetaSEXP, SEXP b_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type old_assign(old_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type psi(psiSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< double >::type a_theta(a_thetaSEXP);
    Rcpp::traits::input_parameter< double >::type b_theta(b_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(expand_contract(K, old_assign, psi, xi, a_theta, b_theta));
    return rcpp_result_gen;
END_RCPP
}
// cluster_assign
Rcpp::List cluster_assign(arma::vec old_assign, arma::vec xi, arma::mat y, arma::vec gamma_hyper);
RcppExport SEXP _ClusterProj_cluster_assign(SEXP old_assignSEXP, SEXP xiSEXP, SEXP ySEXP, SEXP gamma_hyperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type old_assign(old_assignSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gamma_hyper(gamma_hyperSEXP);
    rcpp_result_gen = Rcpp::wrap(cluster_assign(old_assign, xi, y, gamma_hyper));
    return rcpp_result_gen;
END_RCPP
}
// test_fn
Rcpp::List test_fn(arma::vec probs);
RcppExport SEXP _ClusterProj_test_fn(SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(test_fn(probs));
    return rcpp_result_gen;
END_RCPP
}
// foo
Rcpp::NumericVector foo(double t, Rcpp::NumericVector k);
RcppExport SEXP _ClusterProj_foo(SEXP tSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type t(tSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(foo(t, k));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ClusterProj_expand_cluster", (DL_FUNC) &_ClusterProj_expand_cluster, 8},
    {"_ClusterProj_contract_cluster", (DL_FUNC) &_ClusterProj_contract_cluster, 7},
    {"_ClusterProj_expand_contract", (DL_FUNC) &_ClusterProj_expand_contract, 6},
    {"_ClusterProj_cluster_assign", (DL_FUNC) &_ClusterProj_cluster_assign, 4},
    {"_ClusterProj_test_fn", (DL_FUNC) &_ClusterProj_test_fn, 1},
    {"_ClusterProj_foo", (DL_FUNC) &_ClusterProj_foo, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ClusterProj(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
